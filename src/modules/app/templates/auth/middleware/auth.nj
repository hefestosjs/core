import type { Next, Request, Response } from "@hefestos/core";
import { redisClient } from "@hefestos/core";
import AuthConfig from "app/config/auth";
import jwt from "jsonwebtoken";

function isAuthenticated(request: Request, response: Response, next: Next) {
  if (AuthConfig.option === "session") {
    if (!request.session.user) return next("route");

    return next();
  }

  if (AuthConfig.option === "token") {
    const token = request.headers.authorization?.split(" ")[1];

    if (!token) {
      response.status(401).json({ message: "Access token not provided" });
      return;
    }

    jwt.verify(
      token,
      AuthConfig.strategy.token.secret,
      async (err: any, decoded: any) => {
        if (err) {
          return response.status(401).json({ message: "Invalid access token" });
        }

        if (AuthConfig.strategy.token.useRedis) {
          const accessToken = await redisClient.get(decoded.userId);

          if (!accessToken || accessToken !== token) {
            return response
              .status(401)
              .json({ message: "Access token not valid" });
          }

          next();
        } else {
          /**
           * Add your logic
           */
        }
      },
    );
  }
}

export { isAuthenticated };
