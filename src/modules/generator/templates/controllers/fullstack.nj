import type { Request, Response } from "@hefestos/core";
import ApiResponse from "app/utils/ApiResponse";
import { {{ name | pascalCase | singularize }}Service } from "app/services/{{ name | pascalCase | singularize }}";
import {{ name | pascalCase | singularize }}Validator from "app/validations/{{ name | pascalCase | singularize }}";

export default class {{ name | pascalCase | singularize }}Controller {
  static async index(request: Request, response: Response) {
    const { page, filter } = request.query as {
      page?: number;
      filter?: string;
    };
    
    const data = await {{ name | pascalCase | singularize }}Service.List(page, filter);

    return response.render("{{ name | pluralize }}/list", { title: "List {{ name | pascalCase | singularize }}", data });
  }

  static async show(request: Request, response: Response) {
    try {
      const { id } = request.params;
      const data = await {{ name | pascalCase | singularize }}Service.Show(id);

      return response.render("{{ name | pluralize }}/show", { data });
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }

  static async create(request: Request, response: Response) {
    return response.render("{{ name | pluralize }}/create", { title: "Create {{ name | pascalCase | singularize }}" });
  }

  static async store(request: Request, response: Response) {
    try {
      await {{ name | pascalCase | pluralize }}Validator.Create(request.body);
      const data = await {{ name | pascalCase | singularize }}Service.Create(request.body);

      return ApiResponse.success(response, data, "/{{ name | pluralize }}");
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }

  static async edit(request: Request, response: Response) {
    try {
      const { id } = request.params;
      const data = await {{ name | pascalCase | singularize }}Service.Show(id);

      return response.render("{{ name | pluralize }}/edit", { data });
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }

  static async update(request: Request, response: Response) {
    try {
      await {{ name | pascalCase | pluralize }}Validator.Update(request.body);
      const { id } = request.params;
      const data = await {{ name | pascalCase | singularize }}Service.Update(id, request.body);

      return ApiResponse.success(response, data, "/{{ name | pluralize }}");
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }

  static async destroy(request: Request, response: Response) {
    try {
      const { id } = request.params;
      const data = await {{ name | pascalCase | singularize }}Service.Delete(id);

      return ApiResponse.success(response, data, "/{{ name | pluralize }}");
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }
}
